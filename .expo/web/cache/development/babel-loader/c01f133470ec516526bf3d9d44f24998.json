{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\n\nvar App = function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this);\n    _this.state = {\n      data: []\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      apiCall();\n    }\n  }, {\n    key: \"apicall\",\n    value: function apicall() {\n      var response, respJson;\n      return _regeneratorRuntime.async(function apicall$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(fetch('https://ns.nowna.com/zohoTest/test'));\n\n            case 2:\n              response = _context.sent;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 5:\n              respJson = _context.sent;\n              console.log(respJson);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: styles.container\n      }, React.createElement(Text, {\n        style: styles.txt\n      }, \"Hello\"), React.createElement(Button, {\n        title: \"back to Profile Screen\",\n        onPress: function onPress() {\n          return navigation.navigate('ProfileScreen', {\n            name: 'ProfileScreen'\n          });\n        }\n      }, \" \"));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default App;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'gray',\n    fontFamily: 'sans-serif'\n  },\n  txt: {\n    color: 'black'\n  }\n});","map":{"version":3,"sources":["C:/Users/rovic/Documents/CC2021/CC2021/new folder/BMI/components/ApiScreen.js"],"names":["React","App","state","data","apiCall","fetch","response","json","respJson","console","log","styles","container","txt","navigation","navigate","name","Component","StyleSheet","create","flex","alignItems","justifyContent","backgroundColor","fontFamily","color"],"mappings":";;;;;;;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;;;;;;IAKMC,G;;;;;AACF,iBAAc;AAAA;;AAAA;;AACV;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAE;AADG,KAAb;AAFU;AAKb;;;;WACD,6BAAoB;AAChBC,MAAAA,OAAO;AACV;;;WAED;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACyBC,KAAK,CAAC,oCAAD,CAD9B;;AAAA;AACQC,cAAAA,QADR;AAAA;AAAA,+CAEyBA,QAAQ,CAACC,IAAT,EAFzB;;AAAA;AAEQC,cAAAA,QAFR;AAGIC,cAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;;AAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;WAQA,kBAAS;AACL,aACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEG,MAAM,CAACC;AAApB,SACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAED,MAAM,CAACE;AAApB,iBADJ,EAII,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,wBAAd;AAAuC,QAAA,OAAO,EAAE;AAAA,iBAAMC,UAAU,CAACC,QAAX,CAAoB,eAApB,EAAqC;AAAEC,YAAAA,IAAI,EAAE;AAAR,WAArC,CAAN;AAAA;AAAhD,aAJJ,CADJ;AAYH;;;;EAhCahB,KAAK,CAACiB,S;;AAoCxB,eAAehB,GAAf;AAGA,IAAMU,MAAM,GAAGO,UAAU,CAACC,MAAX,CAAkB;AAC7BP,EAAAA,SAAS,EAAE;AACPQ,IAAAA,IAAI,EAAE,CADC;AAEPC,IAAAA,UAAU,EAAE,QAFL;AAGPC,IAAAA,cAAc,EAAE,QAHT;AAIPC,IAAAA,eAAe,EAAE,MAJV;AAKPC,IAAAA,UAAU,EAAE;AALL,GADkB;AAU7BX,EAAAA,GAAG,EAAE;AACDY,IAAAA,KAAK,EAAE;AADN;AAVwB,CAAlB,CAAf","sourcesContent":["\r\nimport React from 'react';\r\n\r\nimport { StyleSheet, Text, View, Button } from 'react-native';\r\n\r\n\r\nclass App extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            data: []\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        apiCall();\r\n    }\r\n\r\n    async apicall() {\r\n        let response = await fetch('https://ns.nowna.com/zohoTest/test');\r\n        let respJson = await response.json()\r\n        console.log(respJson);\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <View style={styles.container}>\r\n                <Text style={styles.txt}>\r\n                    Hello\r\n                </Text>\r\n                <Button title=\"back to Profile Screen\" onPress={() => navigation.navigate('ProfileScreen', { name: 'ProfileScreen' })}> </Button>\r\n\r\n            </View>\r\n\r\n\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default App;\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        backgroundColor: 'gray',\r\n        fontFamily: 'sans-serif',\r\n\r\n\r\n    },\r\n    txt: {\r\n        color: 'black'\r\n\r\n    },\r\n\r\n});\r\n"]},"metadata":{},"sourceType":"module"}